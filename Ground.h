using namespace std;
#pragma once
#include "glut.h"
#include <math.h>
#include <tuple>

#ifndef __GROUND_H
#define __GROUND_H

const double PI = 3.14159;
const int ROWS = 200, COLUMNS = 300;
static double heights[ROWS][COLUMNS] = { 0 }; //matrix of heights
const double INITIAL_HEIGHTS_MATRIX[ROWS / 10][COLUMNS / 10] = {
		{2, 2, 2, 4, 4 ,4, 4, 5 ,5, 5, 6, 4, 4, 2, 2, 2, 2, 0, -2, -6, -4 ,-2, 0, 2, 5, 6, 6, 6, 6, 4},
		{2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 6, 4, 4, 4, 2, 2, 0, -2, -4, -6, -2, 0, 3, 4, 6, 8, 8, 6, 5, 4},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, -2, -4, -6, -2, 0, 2, 2, 3, 4, 4, 3, 2, 2},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, -2, -4, -4, -2, 0, 2, 2, 2, 2, 2, 2, 2, 2},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, -2, -4, -4, -2, 0, 2, 2, 2, 2, 2, 2, 2, 2},// Where the rail is
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, -2, -4, -6, -2, 0, 2, 2, 2, 2, 2, 2, 2},
		{2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 0, -1, -2, -4, -6, -2, 0, 2, 2, 2, 2, 3, 2, 2},
		{2, 2, 3, 3, 4, 4, 4, 4, 5, 4, 3, 3, 2, 3, 3, 2, 2, 0, -2, -4, -4, -2, 0, 2, 2, 2, 4, 4, 3, 3},
		{6, 6, 6, 6, 8, 8, 8, 8, 6, 6, 6, 4, 4, 6, 6, 4, 2, 2, 0, -2, -4, -4, -2, 0, 2, 2, 4, 6, 8, 6},
		{4, 4, 4, 6, 6, 6, 8, 8, 6, 6, 6, 6, 6, 8, 8, 6, 4, 2, 0, -2, -4, -4, -2, 0, 2, 4, 6, 8, 10, 8},
		{4, 4, 4, 4, 6, 6, 6, 8, 8, 6, 6, 6, 6, 8, 10, 8, 6, 4, 2, 0, -2, -4, -4, -2, 2, 4, 6, 8, 10, 8},
		{4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 8, 8, 10, 12, 10, 8, 6, 2, 0, -2, -4, -4, -2, 0, 2, 6, 6, 8, 6},
		{4, 4, 4, 6, 6, 6, 6, 8, 8, 8, 8, 8, 10, 12, 14, 12, 10, 8, 4, 2, -2, -4, -4, -2, 0, 2, 4, 6, 8, 6},
		{4, 4, 4, 6, 6, 6, 8, 8, 8, 10, 10, 10, 12, 14, 16, 14, 12, 10, 6, 2, -2, -4, -4, -2, 0, 2, 4, 6, 6, 6},
		{4, 4, 4, 6, 6, 6, 8, 8, 8, 10, 10, 12, 14, 16, 20, 16, 14, 12, 10, 6, 0, -4, -6, -2, 0, 2, 4, 6, 6, 8},
		{4, 4, 4, 6, 6, 6, 8, 8, 8, 10, 12, 14, 16, 20, 24, 20, 16, 12, 8, 4, 0, -2, -6, -2, 2, 4, 6, 6, 8, 8},
		{4, 4, 4, 6, 6, 6, 8, 8, 8, 10, 10, 12, 14, 16, 20, 18, 14, 10, 8, 6, 2, -2, -4, -6, -2, 2, 4, 6, 6, 8},
		{4, 4, 4, 6, 6, 6, 8, 8, 8, 10, 10, 10, 12, 14, 16, 14, 12, 8, 4, 2, 0, -2, -4, -4, -2, 2, 2, 4, 6, 8},
		{4, 4, 4, 6, 6, 6, 8, 8, 8, 10, 10, 10, 10, 12, 14, 12, 10, 8, 6, 2, -2, -4, -4, -2, 2, 4, 6, 6, 8, 8},
		{4, 4, 4, 6, 6, 6, 6, 8, 8, 8, 8, 8, 10, 10, 12, 10, 8, 6, 4, 2, -2, -4, -4, -2, 2, 4, 4, 8, 8, 8}
};
static tuple<int, int> streamBed = make_tuple(0, COLUMNS); //Coordinates for the bridge

void ReadInitialCoordinates();
void TerrainChassis();
void SmoothTerrain();
void PrepareRoad();

void DrawGround();
void SetColor(double height);
void DrawRail();
void ScanRailSurface(int row);
void DrawBridge();
void DrawBridgeColumns(int columnPos, int i, int numOfColumns);

#endif // !__GROUND_H